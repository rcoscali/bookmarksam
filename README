CONFIG_SHELL=/bin/bash /bin/bash ./configure --prefix=/usr --libdir=/usr/lib/x86_64-linux-gnu --enable-dependency-tracking --disable-silent-rules

Introduction
============

Setting up an `Autotools` build system can be daunting. So I decided to 
create a template with the basics to use as the basis for my projects. 

It may be surprising to the novice that there is no `./configure` but
`./configure` is a generated file that it's shipped with the
distribution of your software  (the tarball that you get `make dist`). 
As such the `./configure` doesn't belong in the source control
repository. Running `autoreconf -f` will generate `./configure` and a
bunch of other files. 

To build from scrath you need to perform:

    ./autogen.sh  # Only needed if configure.ac or Makefile.am changes
    ./configure   # generates Makefiles and config.h
    make # build 
    make check # run the tests


I'm not an autotools expert by any means. So take my advice with a grain
of salt. 

There are two input files:

  * `configure.ac`: The `./configure` script will be generated from 
                    from it. Here is were you check for libraries,
                    headers, etc.
  * `Makefile.am`: This file will be transformed into `Makefile.in` that 
                   `./configure` will use to generate the `Makefile`.

Regarding tests, the basic aproach is to have multiple is to run some 
programs with the test and just check the exit code for those. This is
simple and functional but you only get a PASS / FAIL per executable. To
be able to get the individual tests results (asusming that there are 
several , potentially hundreds, of test on a single executable) you need
to use the TAP.

The TAP aproach is that the executables that you use for test will
output the test result on standard out so that `make check` will parse 
it, collect the results, and present them in a nice way. 

I opted to go for the TAP approach although it requires a more complex
setup.
